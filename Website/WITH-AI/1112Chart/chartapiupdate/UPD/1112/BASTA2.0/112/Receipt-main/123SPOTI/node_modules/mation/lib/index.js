'use strict';

exports.__esModule = true;
exports['default'] = Mation;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _performanceNow = require('performance-now');

var _performanceNow2 = _interopRequireDefault(_performanceNow);

var _reactMotionLibPresets = require('react-motion/lib/presets');

var _reactMotionLibPresets2 = _interopRequireDefault(_reactMotionLibPresets);

var _state = require('./state');

var _state2 = _interopRequireDefault(_state);

var _simpleSignal = require('simple-signal');

var _simpleSignal2 = _interopRequireDefault(_simpleSignal);

var _spring = require('./spring');

exports.presets = _reactMotionLibPresets2['default'];
exports.spring = _spring.spring;

var Animation = (function () {
  function Animation(val, config) {
    var _this = this;

    _classCallCheck(this, Animation);

    this.signal = _simpleSignal2['default']();
    this.moveSignal = _simpleSignal2['default']();
    this.settleSignal = _simpleSignal2['default']();

    this.state = _state2['default'](val);
    this.config = config;
    this.destination = val;
    this.last;
    this.updateHandler = function (current) {
      return _this.update(current);
    };
  }

  Animation.prototype.moveTo = function moveTo(newVal) {
    this.last = this.state.moving ? this.last : _performanceNow2['default']();
    this.destination = newVal;
    if (!this.state.moving) this.moveSignal.emit(), this.scheduleUpdate();
  };

  Animation.prototype.scheduleUpdate = function scheduleUpdate() {
    _raf2['default'](this.updateHandler);
  };

  Animation.prototype.update = function update(current) {
    var delta = current - this.last;
    this.last = current;
    // hack for inactive tabs
    if (delta > 100) return this.scheduleUpdate();

    this.state.step(delta, this.destination, this.config);
    this.signal.emit(this.state.x);
    if (this.state.moving) this.scheduleUpdate();else this.settleSignal.emit();
  };

  Animation.prototype.on = function on(listener) {
    listener(this.state.x);
    this.signal.on(listener);
  };

  Animation.prototype.off = function off(listener) {
    this.signal.off(listener);
  };

  Animation.prototype.onSettle = function onSettle(fn) {
    this.settleSignal.on(fn);
  };

  Animation.prototype.offSettle = function offSettle(fn) {
    this.settleSignal.off(fn);
  };

  Animation.prototype.onMove = function onMove(fn) {
    this.moveSignal.on(fn);
  };

  Animation.prototype.offMove = function offMove(fn) {
    this.moveSignal.off(fn);
  };

  return Animation;
})();

function Mation(val, config) {
  return new Animation(val, config);
}

exports.Mation = Mation;